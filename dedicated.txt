[[ch:work-stealing]]
== Chapter: Work Stealing in Dedicated Environments

The work-stealing algorithm is a solution to the *_online scheduling
problem_*, where we are given a latexmath:[$P$] processes and a
computation dag, and asked to construct an execution schedule with
minimal length, while spending as little work and time for scheduling
itself.

We consider multithreaded computations represented as dags as
described in <<ch:multithreading, an earlier chapter>>.  To streamline the
analysis, we assume without loss of generality that the root vertex
has a single child.  This assumption eliminates a few corner cases
from the analysis.

=== Work-Stealing Algorithm


In work stealing, each process maintains a *_deque_*, doubly ended
queue, of vertices.  Each process tries to work on its local deque as
much as possible. Execution starts with the root vertex in the deque
of one of the processes.  It ends when the final vertex is executed.  

A work stealing scheduler operates as described by our
<<multithreading::scheduler-typical, generic scheduling algorithm>>
but instead of operating on threads, it operates on vertices of the
dag. To obtain work, a process pops the vertex at the bottom of its
deque and executes it. We refer to the vertex being executed by a
process as the *_assigned vertex_*.  When executed, the ready vertex
can make the other vertices ready, which are then pushed onto the
bottom end of the deque in an arbitrary order.  If a process finds its
deque empty, then the process becomes a *_thief_*.  A thief picks a
*_victim_* process at random and attempts to steals a thread from
another it by popping a thread off the top of the victim's deque.  The
thief performs steal attempts until it successfully steals a thread,
at which point, the thief goes back to work and the stolen thread
becomes its assigned thread.



The pseudo-code for the algorithm is shown below.  All deques are
initially empty and the root vertex is assigned to the process zero.
The algorithm operates in *_rounds_*.  In each round, a process
executes the assigned vertex if any, pushes the newly enabled vertices
to its deque, and obtains a new assigned vertex from its deque.  If
the round starts with no assigned vertex then the process becomes a
thief performs a steal attempt.  For simplicity, we refer to a steal
attempt as a *_throw_*. Noe that a steal attempt start and completes
in the same round.

Such a *_steal attempt_* can fail if 

. the victim's deque is empty, or

. contention between processors occurs and the vertex targeted by the
thief is executed by the process that own the dequer or stolen by
another thief.


For the analysis of the algorithm, we shall assume that each
instruction and each deque operations executes in a single step to
execute.  As a result, each iteration of the loop, a round, completes
in constant steps. 

[source,{cpp}]
----
// Assign root to process zero.
assignedVertex = NULL
if (self == ProcessZero) {
  assignedVertex = rootVertex
}


// Run scheduling loop.
while (computationDone == false) {

  // Execute assigned vertex.
  if (assignedVertex <> NULL) {
    (nChildren, child1, child2) = execute (assignedVertex)

    if (nChildren == 1) {   
      self.pushBottom child1
    } 
    else {                      
      self.pushBottom child1
      self.pushBottom child2
    }
    assignedVertex = self.popBottom ()
  } 
  else {  
    // Make steal attempt.
    victim = randomProcess ()
    assignedVertex = victim.popTop ()
  }
}
----

NOTE: Note that when a vertex enables two vertices they are both
pushed onto the bottom of the deque in an order that is unspecified.
The analysis holds for any such order. However, realistic
implementations will operate at the granularity of threads as defined
in for example <<ch:fork-join, an earlier chapter>> and by the 
<<multithreading::scheduler-typical, generic scheduling algorithm>>.
To make this algorithm consistent with such implementations, we would
push the vertex that is next in the thread last, so that it is
executed next.  Pushing and popping the vertex in of course
unnecessary and should be avoided in an implementation.  For the
purposes of the analysis, this adds a small constant factor that we
don't care to account for.

==== Deque Specification


The deque supports three methods: 

. `pushBottom`, which pushed a vertex at the bottom end of the deque.

. `popBottom`, which returns the vertex at the bottom end of the
deque if any, or returns `NULL` otherwise.

. `popTop`, returns the vertex at the top end of the deque, if any, or
returns `NULL` if the deque is empty.

These operations take place atomically.  We can think of them start by
first obtaining a lock for the deque and then performing the desired
operation.

For the analysis, we shall assume that all these operations take
constant time and in fact complete in one step.  This assumption is
somewhat unrealistic, because it is not known whether `popTop` can be
implemented in constant time.  But a relaxed version of `popTop`,
which allows `popTop` to return `NULL` if another concurrent operation
removes the top vertex in the deque, accepts a constant-time
implementation.  This relaxed version suffices for our purposes.

// TODO: How about the owner removing a vertex.
//


==== Work sequence of a process

Consider the execution of the work stealing algorithm and let
latexmath:[$q$] be any process.  We define the *_work sequence_* of
latexmath:[$q$] as the sequence of vertices defined by the assigned
vertex of latexmath:[$q$] followed by the vertices in its deque
ordered from bottom to top. If a vertex is in the work sequence of a
process, then we say that it *_belongs_* to that process.
 

For example, if a process has just completed the execution of its
assigned vertex but has not pushed the children enabled onto its
deque, then the work sequence consist of the vertices in the deque in
the bottom to top order.

==== Enabling Tree and Weights

Let's recall first the notion of an enabling three.  If execution of
latexmath:[$u$] enables latexmath:[$v$], then we call the edge
latexmath:[$(u,v)$] an *_enabling edge_* and call latexmath:[$u$] the
*_designated parent_* of latexmath:[$v$].  Every vertex except for the
root has a designated parent.  Therefore the subgraph of the dag
consisting of the enabling edges form a rooted tree, called the
*_enabling tree_*.  Note each execution can have a different enabling
tree.

If latexmath:[$d(u)$] is the depth of a node latexmath:[$u$] in the
enabling tree, then we define the weight of latexmath:[$u$], written
latexmath:[$w(u)$] as follows latexmath:[$w(u) = S - d(u)$].  The root
has weight latexmath:[$S$].  Intuitively, the weight is equal to the
distance of a vertex from the completion.



==== Structural Lemma


.Lemma[Structural Lemma] 
************************

Consider any time in an execution of the work-stealing algorithm after
the execution of the root vertex. Let latexmath:[$v_0, v_1, \ldots,
v_k$] denote the work sequence of a process. Let latexmath:[$u_0, u_1,
\ldots, u_k$] be the sequence consisting of the parents of the
vertices in the working sequence in the same order.  Then
latexmath:[$u_i$] is an ancestor of latexmath:[$u_{i-1}$] in the
enabling tree.  Moreover, we may have latexmath:[$u_0 = u_1$] but for
any latexmath:[$2 \le i \le k$] latexmath:[$u_{i-1} \neq u_i$], that is
the ancestor relationship is proper.

************************


[[dedicated::structural]]
.Structural lemma illustrated.
****
image:deques-and-enabling-tree-case-1.png["",width="100pt",align="left"]
{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:deques-and-enabling-tree-case-2.png["",width="100pt",align="right"]
****

Before we prove the lemma, we state an important corollary.

.Corrollary
***********

Let latexmath:[$v_0, v_1, v_2 \ldots v_k$] defined as in the structural lemma
above.  Then, we have latexmath:[$w(v_0) \le w(v_1) < w(v_2) \ldots w(k-1) <
w(v_k)$] defined as in the structural lemma above.

***********



The proof of the structural lemma is by induction on the number of
rounds.

At the initialization and before the beginning of the first round, all
deques are empty, root is assigned to a process but has not been
executed.  The root vertex is then executed and enables a single
vertex, this vertex is pushed onto the deque and popped again becoming
the assigned vertex at the beginning of the second round.  At any of
these points in time after the execution of the root, process zero's
work sequence consist of the child of the root, latexmath:[$v$].  The
designated parent of latexmath:[$v$] is root and the lemma holds trivially.

For the inductive case, assume that the lemma holds up to beginning of
some later round.  We will show that it holds at any point during the
round and also after the completion of the round.

Consider any process and its deque.  We have two cases to consider.

*Case 1:* There is an assigned node, latexmath:[$v_0$], which is executed. 

By the definition of work sequences, we know that latexmath:[$v_1,
\ldots, v_k$] are the vertices in the deque. Let latexmath:[$u_1,
\ldots, u_k$] be their designated parents. By induction, we know that
latexmath:[$u_i$] is an ancestor of latexmath:[$u_{i-1}$] in the
enabling tree and the ancestor relationship is proper except for
latexmath:[$i = 1$], where it is possible that latexmath:[$u_0 =
u_1$].  Immediately after the execution of the assigned node, the work
sequence of the process consists of all the vertices in the deque and
the lemma follows easily.


[[dedicated::structural-popbottom-execute]]
.Structural lemma illustrated after the assigned vertex is executed.
image::deques-and-enabling-tree-execute.png["",width="100pt",align="center"]


After the execution of the assigned vertex latexmath:[$v_0$], we have
several sub-cases to consider.

*Case 1.1:* execution of latexmath:[$v_0$] enables no children. 

Since the deque remains the same, the lemma holds trivially.

*Case 1.2:* execution of latexmath:[$v_0$] enables one child
latexmath:[$x$], which is pushed onto the bottom of the deque.  In this
case, latexmath:[$v_0$] becomes the parent of latexmath:[$x$].  The
lemma holds.

[[dedicated::structural-popbottom-enable-one]]
.Structural lemma illustrated after the assigned vertex enables one child.
image::deques-and-enabling-tree-one-child.png["",width="100pt",align="center"]


*Case 1.2:* execution of latexmath:[$v_0$] enables two children
  latexmath:[$x,y$], which are pushed to the bottom of the deque in an
  arbitrary order.

In this case, latexmath:[$v_0$] becomes the parent of latexmath:[$x$]
  and latexmath:[$y$].  The lemma holds.

[[dedicated::structural-popbottom-enable-two]]
.Structural lemma illustrated after the assigned vertex enables two children.
image::deques-and-enabling-tree-two-children.png["",width="100pt",align="center"]

After the execution of the assigned vertex completes and the children
are pushed, the process pops the vertex at the bottom of the
deque. There are two cases to consider.

. If the deque is empty, then the process finds no vertex in its deque
and there is no assigned vertex at the end of the round, thus the work
sequence is empty and the lemma holds trivially.

. If the deque is not empty, then the vertex at the bottom of the
deque becomes the new assigned vertex. The lemma holds trivially
because making the bottom vertex the assigned vertex has no impact on
the work sequence of the process and thus the correctness of the
lemma.

*Case 2:* A successful steal takes place and removes the top vertex in
  the deque.  In this case, the victim process loses its top vertex,
  which becomes the assigned vertex of the thief.  The work sequence
  of the victim loses its rightmost element and the lemma continues to
  hold for the victim.  When the stolen vertex is assigned, the work
  sequence of the thief consist of just the stolen vertex and the
  lemma holds for the thief. 
				   

=== Analysis

==== Balls and Bins Game

One crucial fact behind the analysis is a probabilistic lemma.

.Lemma[Balls and Bins]
**********************

Suppose that latexmath:[$P$] balls are thrown uniformly and randomly
into latexmath:[$P$] bins, where bin latexmath:[$1 \le i \le P$] has
weight latexmath:[$W_i$], and latexmath:[$W = \sum_{i=1}^{P}{W_i}$].  For
each bin, define the random variable

[latexmath]
+++++++++++
$
X_i = \left\{
\begin{array}{ll}
W_i & \mbox{if a ball lands in bin}~i
\\
0 & \mbox{otherwise}
\end{array}
\right.
$
+++++++++++

If latexmath:[$X = \sum_{i=1}^{P}{X_i}$], then for any
latexmath:[$\beta, 0 < \beta <  1$], we
	      have latexmath:[$P \lbrack X \ge \beta W \rbrack > 1 - \frac{1}{(1-\beta)e}$].

************************

.An application of the lemma
====

Let's calculate the probability for latexmath:[$\beta = 1/2$].  By the
lemma, we know that if latexmath:[$P$] balls are thrown into
latexmath:[$P$] bins, then the probability that the total weight of
the bins that have a ball in them is at least half the total weight is 
latexmath:[$P \lbrack X \ge \frac{W}{2} \rbrack 1 - \frac{1}{0.5e}$].
Since latexmath:[$e > 2.71$], this quantity can be canculated as at
least latexmath:[$0.25$]. We thus conclude that we using the Ball and
Bins lemma, we can "collect" at least half of the weight with
probability at least latexmath:[$0.25$] 
====

The Ball and Bins lemma proves something relatively intuitive.  If you
throw as many ball as there are bins, changes are non-trivial that you
will have a ball in at least a constant fraction of the bins, because
chances of all balls landing in a small number of bins is law.  

.Proof
****

The proof of the lemma is a relatively straightforward application of
Markov's inequality.  Consider the random variable latexmath:[$W_i -
X_i$].  This random variable takes on the value latexmath:[$0$] if a
ball lands in bin latexmath:[$i$] and latexmath:[$W_i$] otherwise.
Thus,

latexmath:[$E \lbrack W_i - X_i \rbrack  = W_i \cdot (1-1/P)^P \le W_i / e.$]

It follows that 
latexmath:[$ E\lbrack W - X \rbrack \le W / e $].

By Markov's inequality we have 

latexmath:[$P \lbrack W-X > (1-\beta) W \rbrack \le \frac{E \lbrack W-X \rbrack}{(1-\beta)W}$], and thus
latexmath:[$P \lbrack X < \beta W \rbrack < \frac{1}{(1-\beta)e}.$]

**** 

==== Bound in terms of Throws

.Lemma[Work-Throw Bound] 
*******************

Consider any multithreaded computation with work latexmath:[$W$].  The
latexmath:[$P$]-processor execution time is latexmath:[$O(W/P + S/P)$]
steps where latexmath:[$S$] is the number of throws.

*******************

IMPORTANT:: The proof assumes that each instructions including deque
operations takes one step by assuming that each round contributes to
the work or to the steal bucket.  If this assumption is not valid,
then we might need to change the notion of rounds.  This is what ABP
does.

.Proof
****

We shall consider the execution in terms of rounds and collect a token
from each processor in each round.  Since rounds are a constant number
of steps, we will thus collect as many tokes as total number of steps
divided by some constant.

Consider the execution in terms of rounds

. If a vertex is executed in that round, then the processor places a
token into the work bucket.

. If a steal attempt takes place in that round, then a throw occurs in
this round, and the processor places a token into the throw bucket.

There are exactly latexmath:[$S$] tokens in the throw bucket and
exactly latexmath:[$W$] tokens is the work bucket.  Thus the total
number of tokens is at most latexmath:[$W + S$].  Since in each round
a process either executes a vertex or performs a throw,
latexmath:[$P$]-process execution time, latexmath:[$T_P = \frac{W +
S}{P}$].

****


==== Bounding the Number of Throws

Our analysis will use a potential-function based method.  We shall
divide the computation into phases each of which decreases the
potential by a constant factor.


Consider some round latexmath:[$i$] and let latexmath:[$R_i$] denote
the set of ready vertices in the beginning of that round. A vertex is
latexmath:[$R_i$] is either assigned to a process or is in a deque.
For each vertex latexmath:[$v \in R_i$], we define its *_potential_*
as

. latexmath:[$\phi_i(v) = 3^{2w(v)} - 1$], if latexmath:[$v$] is assigned, or
. latexmath:[$3^{2w(v)}$], otherwise.

We define the potential at round latexmath:[$i$], written
latexmath:[$\Phi_i$] as

latexmath::[$\Phi_i = \sum_{v \in R_i}{\phi_i(v)}.$]

.Definition: Beginning and termination potential
****

At the beginning of the computation, the only ready vertex is the
root, which has a weight of latexmath:[$S$], because it is also the
root of the enabling tree.  Therefore the potential in the beginning
of the computation is latexmath:[$3^{2S-1}$].

At the end of the computation, there are no ready notes and thus the
potential is zero.

****

.Definition: Basic definitions for potentials
****

. The *_potential of process latexmath:[$q$]_* is
latexmath:[$\Phi_i(q) = \sum_{v \in R_i(q)}{\phi_i(v)}.$]


. We write latexmath:[$A_i$] for the set of processes whose deques are
empty at the beginning of round latexmath:[$i$].  We write
latexmath:[$\Phi_i(A_i)$] for the total potential of the processes
latexmath:[$A_i$], latexmath:[$\Phi_i(A_i) = \sum_{q \in
A_i}{\Phi_i(q)}$].

. We write latexmath:[$D_i$] for the set of other processes.  We write
latexmath:[$\Phi_i(D_i)$] for the total potential of the processes
latexmath:[$D_i$], latexmath:[$\Phi_i(D_i) = \sum_{q \in
D_i}{\Phi_i(q)}$].


. We can write the total potential in round latexmath:[$i$] as follows
latexmath:[$\Phi_i = \Phi_i(A_i) + \Phi_i(D_i)$].

****


.Lemma: Vertex Assignment 
****

Consider any round latexmath:[$i$] and let latexmath:[$v$] be a vertex
that is ready but not assigned in the beginning of that round. Suppose
that the scheduler assigns latexmath:[$v$] to a process in that round.
In this case, the potential decreases by latexmath:[$2/3\phi_i(v)$].

****

.Proof
****

This is a simple consequence of the definition of the potential function:

[latexmath]
+++++++++++
$
\phi_{i}(v) - \phi_{i+1}(v) = 3^{2w(v)} - 3^{2w(v)-1} = 2/3 \phi_i(v).
$
+++++++++++

****

.Lemma: Monotonicity of Total Potential
****

Total potential does not increase from one round to the next, i.e.,
latexmath:[$\Phi_{i+1} \le \Phi_i$]. 

****

.Proof
****

Let's now consider how the potential changes during each round. 
There are two cases to consider based on scheduler actions.

*Case 1:* Suppose that the scheduler assign a vertex latexmath:[$v$]
to a process. By the Vertex Assignment Lemma, we know that the
potential decreases by latexmath:[$2/3 \phi_i(v)$]. Since
latexmath:[$\phi_i(v)$] is positive, the potential decreases.

Note that this calculation holds regardless of where in the deque the
vertex latexmath:[$v$] is.  Specifically, it could have been the
bottom or the top vertex.

*Case 2:* suppose that the scheduler executes a vertex
latexmath:[$v$] and pushes its children onto the deque.  There are two
sub-cases to consider.

*Case 2.1:*
suppose that the scheduler pushes onto the deque the only child
 latexmath:[$x$] of a vertex latexmath:[$v$].  Assuming that the child
 stays in the deque until the beginning of the next round, the
 potential decreases by

[latexmath]
+++++++++++
$$
\phi_{i}(v) - \phi_{i+1}(x) = 3^{2w(v)-1} - 3^{2w(v)-2} =3^{2w(v)-1}(1
- 1/3) = 2/3 \cdot  \phi_i(v).
$$
+++++++++++

*Case 2.2:* suppose that the scheduler pushes onto the deque two
 children latexmath:[$x,y$] of a vertex latexmath:[$v$]. Assuming that
 the children remain in the deque until the beginning of the next
 round, then potential decreases by

[latexmath]
+++++++++++
$$
\begin{array}{lll}
\phi_i(v) - \phi_{i+1}(x) - \phi_{i+1}(y) & = & 3^{2w(v)} - 3^{2w(v)-2}
- 3^{2w(v)-2} 
\\
& = &  3^{2w(v)-1} (1 - 1/3 - 1/3) 
\\
& = & 1/3 \cdot  \phi_i(v).
\end{array}
$$
+++++++++++

Since latexmath:[$\phi_i(v)$] is positive, the potential decreases in
both cases. 

In each round each process performs none, one, or both of these
actions.  Thus the potential never increases.

Remark: in the second case, it is safe to assume that the children
remain in the deque until the next round, because assignment of a
vertex only decreases the potential further.

****

We have thus ustablished that the potential decreases but this  by
itself does not suffice.  We also need to show that it decreases by
some significant amount. This is our next step in the analysis.

We are now going to show that after latexmath:[$P$] throws the total
potential decreases with constant probability.

.Lemma[Top-Heavy Deques]
************************

Consider any round latexmath:[$i$] and any process latexmath:[$q \in
D_i$].  The topmost vertex in latexmath:[$q$]'s deque contributes at
least latexmath:[$3/4$] of the potential of process latexmath:[$q$].

************************

This lemma follows directly from the structural lemma.  The case in
which the topmost vertex latexmath:[$v$] contributes the least of the
process is when the assigned vertex and latexmath:[$v$] have the same
parent.  In this case, both vertices have the same depth and thus we
have

[latexmath]
+++++++++++
$$
\Phi_i(q) = \phi_i(v) + \phi_i(x) = 3^{2w(v)} + 3^{2w(x)-1} =
3^{2w(v)} + 3^{2w(v)-1} =  (4/3) \phi_i(v).
$$
+++++++++++



.Lemma: latexmath:[$P$] Throws
*******

Consider any round latexmath:[$i$] and any later round latexmath:[$j$]
such that at least latexmath:[$P$] throws occur at rounds from
latexmath:[$i$] (inclusive) to latexmath:[$j$] (exclusive). Then, we
have

[latexmath]
+++++++++++
$$
Pr \lbrack \Phi_i - \Phi_j \ge \frac{1}{4} \Phi_i(D_i) \rbrack > \frac{1}{4}.
$$
+++++++++++
*******

.Proof:
****

*First* we use the Top-Heavy Deques Lemma to establish the
following. If a throw targets a process with a nonempty deque as its
victim, then the potential decreases by at least of a half of the
potential of the victim.

Consider any process latexmath:[$q$] in latexmath:[$D_i$] and let
latexmath:[$v$] denote the vertex at the top of its deque at round
latexmath:[$i$].  By Top-Heavy Deques Lemma, we have 
latexmath:[$\phi_i(v) \ge \frac{3}{4} \Phi_i(q)$].

Consider any throw that occurs at round latexmath:[$k \ge i$].

. Suppose that this throw is sucessful with `popTop` returning a
vertex. The two subcases both follow by the Vertex Assignment Lemma.

.. If the returned vertex is latexmath:[$v$], then after round
latexmath:[$k$], vertex latexmath:[$v$] has been assigned and possibly
executed. Thus, the potential has decreased by at least
latexmath:[$\frac{2}{3}\, \phi_i(u)$].

.. If the returned vertex is not latexmath:[$v$], then latexmath:[$v$]
is already assigned and possibly executed. Thus, the potential has
decreased by at least latexmath:[$\frac{2}{3}\, \phi_i(v)$].

. Suppose that the throw is not succesful, and `popTop` returns
`NULL`.  In this case, we know that latexmath:[$q$]'s deque was empty
during `popTop`, or some other `popTop` or `popBottom` operation
returned latexmath:[$v$].  In all cases, vertex latexmath:[$u$] has
been assigned or possibly executed by the end of round latexmath:[$k$]
and thus, potential decrases by latexmath:[$\frac{2}{3}\, \phi_i(u)$].


Thus, we conclude that if a thief targets a process latexmath:[$q \in
D_i$] as victim at round latexmath:[$k \ge i$], then the potential
decreases by at least

[latexmath]
+++++++++++
$$
\frac{2}{3}\, \phi_i(u) \ge \frac{2}{3} \frac{3}{4} \Phi_i(q)  =
\frac{1}{2} \Phi_i(q).
$$
+++++++++++

*Second*, we use Ball and Bins Lemma to establish the total decrease
 in potential.

Consider now all latexmath:[$P$] processes and latexmath:[$P$] throws
that occur at or after round latexmath:[$i$].  For each process
latexmath:[$q$] in latexmath:[$D_i$], assign a weight of
latexmath:[$\frac{1}{2}\Phi_i(q)$] and for each process in
latexmath:[$A_i$], we assign a weight of latexmath:[$0$].  The total
weight is thus latexmath:[$\frac{1}{2} \Phi_i(D_i)$].  Using the
Balls-and-Bins Lemma with latexmath:[$\beta = 1/2$], we conclude that
the potential decreases by at least latexmath:[$\beta W = \frac{1}{4}
\Phi_i(D_i)$] with probability greater that latexmath:[$1 -
\frac{1}{(1-\beta) e} > \frac{1}{4}$].

****


IMPORTANT: For this lemma to hold, it is crucial that a steal attempt
does not fail unless the deque is empty or the vertex being targeted
at the time is popped from the deque is some other way. 


.Theorem: Dedicated Environments
****

Consider any multithreaded computation with work latexmath:[$W$] and
span latexmath:[$S$] and execute it with non-blocking work stealing
with latexmath:[$P$] processes in a dedicated environment.  The
exection time is

. latexmath:[$O(W/P + S)$] in expectation, and 

. latexmath:[$O(W/P + S + \lg(1/\epsilon))$] with probability at least
latexmath:[$1-\epsilon$] for any latexmath:[$\epsilon > 0$].

****

.Proof
****

The Throw-Bound Lemma bounds the execution time in terms of throws.
We shall prove bounds on the number of throws.


We break execution into *_phases_* of latexmath:[$\Theta(P)$] throws.
We show that with constant probability, a phase causes the potential
to drop by a constant factor, and since we that the the potential
starts at latexmath:[$\Phi_0 = 3^{2S -1}$] and ends at zero, we can
bound the number of phases.

The first phase begins at round latexmath:[$t_1 = 1$] and ends at the
first round latexmath:[$t_i'$], where at least latexmath:[$P$] thorws occun
during the interval latexmath:[$\lbrack t_1,t_1' \rbrack $].  The second phase begins at round
latexmath:[$t_2 = t_1' + 1$] and so on.

Consider a phase latexmath:[$[i,j)$], where the next round begins at
round latexmath:[$j$].  We show that latexmath:[$\Pr \lbrack \Phi_j \le
\frac{3}{4} \Phi_i \rbrack < \frac{1}{4}$].

Recall that the potential can be partitioned as latexmath:[$\Phi_i =
\Phi_i(A_i) + \Phi_i(D_i)$].

. Since the phase contains at least latexmath:[$P$] throws, by
latexmath:[$P$] Throws Lemma, we know that latexmath:[$P \lbrack
\Phi_i - \Phi_j \ge \frac{1}{4} \Phi_i(D_i) \rbrack > \frac{1}{4}$].

. We need to show that the potential also drops by a constant fraction
of latexmath:[$\Phi_i(A_i)$].  Consider some process latexmath:[$q$]
in latexmath:[$A_i$].  If latexmath:[$q$] does not have an assigned
node, then latexmath:[$\Phi_i(q) = 0$].  If latexmath:[$q$] has an
assigned node latexmath:[$u$], then latexmath:[$\Phi_i(q) =
\phi_i(u)$].  In this case, process latexmath:[$q$] executes node
latexmath:[$u$] at round latexmath:[$i$] and the potential drops by at
least latexmath:[$\frac{5}{9} \phi_i(u)$].  Summing over all processes
in latexmath:[$A_i$], we have latexmath:[$\Phi_i - \Phi_j \ge \frac{5}{9}
\Phi_i(A_i)$].

Thus we conclude that latexmath:[$P \lbrack \Phi_i - \Phi_j \ge \frac{1}{4}
\Phi_i \rbrack > \frac{1}{4}$].  In other words, we have established that in
any phase, potential drops by a quarter with some probability
latexmath:[$\frac{1}{4}$].


Define a phase to be *_successful_* if it causes the potential do trop
by at least a quarter fraction.  We just established that phase is
successful with probability at least latexmath:[$0.25$]. Since the
start potential latexmath:[$\Phi_0 = 3^{2S -1}$] and ends at zero and is always
an integer, the number of successful phases it as most
latexmath:[$(2S-1)\, \log_{4/3}{3} < 8 S$].

Thus, the expceted number of phases is latexmath:[$O(S)$] and since
each contains latexmath:[$O(P)$] throws, the expected number of throws is
latexmath:[$O(SP)$].

We now establish the high-probability bound.  

Suppose that the execution takes latexmath:[$n = 32S + m$] phases.
Each phase succeds with probability at least latexmath:[$p =
\frac{1}{4}$], so the expceted number of successes is at least
latexmath:[$np = 8S + m/4$].  Let latexmath:[$X$] the number of
successes.  By Chernoff bound

[latexmath]
+++++++++++
$$
P \lbrack X < np -a \rbrack < e^{-a^2/2np},
$$
+++++++++++

with latexmath:[$a = m/4$].  Thus if we choose latexmath:[$m = 32S + 16 \ln{1/\epsilon}$], then we have

[latexmath]
+++++++++++
$$
P \lbrack X < 8 S \rbrack < e^{-(m/4)^2 / (16S + m/2)} 
\le  e^{-(m/4)^2 / (m/2 + m/2)} 
=  e^{-m/16}
\le  e^{-16\ln{1/\epsilon}/16}
= \epsilon.
$$
+++++++++++

Thus the probabilty that the executian takes latexmath:[$64S + 18
\ln{1/epsilon)}$] phases or more is less than latexmath:[$\epsilon$].

We conclude that the number of throws is latexmath:[$O(S +
\lg{1/\epsilon}P)$] with probability at least latexmath:[$1 -
\epsilon$].

****



//////////////////////////////////////////////////////////////////////
///

THE MATERIAL IN THIS PART IS DEPRACATED.


== Chapter: Work Stealing in Dedicated Environments



We will present a randomized work stealing algorithm and analyze its
complexity.


We consider multithreaded computations represented as dags as
described in Chapter <<ch:multithreading>>.


=== Offline and online scheduling

INSERT LOWER BOUNDS

INSERT UPPER BOUND FOR BRENT

INSERT UPPER BOUND GREEDY

 
Online scheduling
+++++++++++++++++

Offline scheduling problem discussed above shows that any greedy
scheduler has within factor two of the optimal, based on the lower
bounds established above.  We now turn our attention to the problem of
constructing such an execution schedule online.  In this *_online
scheduling problem_*, we are given a P-processor kernel schedule and a
computation dag, and we are interested in constructing an execution
schedule with minimal length.  As we shall describe next, the
non-blocking work-stealing algorithm achieves this goal, also when
including the cost of scheduling itself.


=== Work-Stealing Algorithm


In work stealing, each process maintains a *_deque_*, doubly ended
queue, of threads.  Each process tries to work on its local deque as
much as possible. Execution starts with the root thread in the deque
of one of the processes.  It ends when the final vertex is executed.  

A work stealing scheduler operates as described by our generic
scheduling algorithm.

To obtain work, a process pops the thread at the bottom of its deque
and executes its ready vertex. We refer to the thread executed by a
process as the *_assigned thread_*.  When executed, the ready vertex
can make the next vertex of the thread ready, which then also gets
executed an so on until one of the following *_synchronization_*
actions occur.

. *_Die:_* The process executes last vertex of the thread, causing
the thread to die. The process then obtains other work.

. *_Block:_* The assigned vertex executes but the next vertex does not
become ready. This blocks the thread and thus the process obtains
other work.

. *_Enable:_* The assigned vertex makes ready the continuation of the
vertex and unblocks another previously blocked thread by making a
vertex from that thread ready. In this case, the process pushes (any)
one thread on the bottom of its deque and continues to execute the
other.

. *_Spawn:_* The assigned vertex spaws another thread.  As in the
previous case, the process pushes one thread on the bottom of its
deque and continues to execute the other.

These actions are not mutually exclusive.  For example, a thread may
spawn/enable a thread and die.  In this case, the process performs the
corresponding steps for each action.

To obtain work, a process attempts to pop a thread from its deque.  If
there is a thread, that thread becomes the new assigned thread.  If
the deque is empty, the process becomes a *_thief_*.  A thief picks a
*_victim_* process at random and attempts to steals a thread from
another it by popping a thread off the top of the victim's deque.

Such a *_steal attempt_* can fail if 
. the victim's deque is empty, or
. contention between multiple thieves occurs.

The thief performs steal attempts until it successfully steals a
thread, at which point, the thief goes back to work and the stolen
thread becomes its assigned thread.

[source,{cpp}]
----
// Assign root to process zero.
assignedVertex = NULL
if (self == ProcessZero) {
  assignedVertex = rootVertex
}


// Run scheduling loop.
while (computationDone == false) {

  // Execute assigned vertex.
  if (assignedVertex <> NULL) {
    (nChildren, child1, child2) = execute (assignedVertex)
    if (nChildren == 0) {         // Die or block.
      assignedVertex = self.popBottom ()
    }
    else if (nChildren == 1) {   // Continue, no synchronization.
      assignedVertex = child1
    } 
    else {                      // Enable or spawn.
      self.pushBottom (child1)
      assignedVertex = child2
    }
  } 
  else {                        // No local work.
    // Make steal attempt.
    victim = randomProcess ()
    assignedVertex = victim.popTop ()
  }
}
----

==== Deque Specification


The deque supports three methods: 

. `pushBottom`, which pushed a vertex at the bottom end of the deque.

. `popBottom`, which returns the vertex at the bottom end of the
deque if any, or returns `NULL` otherwise.

. `popTop`, returns the vertex at the top end of the deque, if any, or
returns `NULL` if the deque is empty.

These operations take place atomically.  We can think of them start by
first obtaining a lock for the deque and then performing the desired
operation.

We shall assume, somewhat unrealistically that all these operations
take constant time.  In reality, it is not know whether `popTop` can
be implemented in constant time.  But a relaxed version of it, which
allows `popTop` to return `NULL` if another concurrent operation
removes the top vertex in the deque, accepts a constant-time
implementation.  This relaxed version suffices for our purposes.

MAKE SURE THAT YOU DON'T ASSUME ANYTHING ELSE IN THE PROOF.

==== Enabling Tree and Weights
Let's recall first the notion of an emabling three.  If execution of
latexmath:[$u$] enables latexmath:[$v$, then we call the edge
latexmath:[$(u,v)$] an *_enabling edge_* and call latexmath:[$u$] the
*_designated parent_* of latexmath:[$v$].  Every vertex except for the
root has a designated parent.  Therefore the subgraph of the dag
consisting of the enabling edges form a rooted tree, called the
*_enabling tree_*.  Note each execution can have a different enabling
tree.

If latexmath:[$d(u)$] is the depth of a node latexmath:[$u$] in the
enabling tree, then we define the weight of latexmath:[$u$, written
latexmath:[$w(u) = S - d(u)$].  The root has weight latexmath:[$S$].
Intuitively, the weight is equal to the distance of a vertex to the
completion.

==== Structural Lemma


.Lemma[Structural Lemma] 
************************

Let latexmath:[$k$] be the number of vertices in a give deque in an
execution of the work-stealing algorithm.  Let latexmath:[$v_1 \ldots
v_k$] denote the vertices, from bottom to top. Let latexmath:[$v_0$]
denote the assigned vertex if there is one. For latexmath:[$0 \le i
\le k$, let latexmath:[$u_i$] denote the designated parent of
latexmath:[$v_i$].  Then latexmath:[$u_i$] is an ancestor of
latexmath:[$u_{i-1}$] in the enabling tree.  Moreover, for any
latexmath:[$2 \le i \le k$] latexmath:[$u_{i-1} \neq u_i$, that is the
ancestor relationship is proper.

************************


[[dedicated::structural]]
.Structural lemma illustrated.
image::deques-and-enabling-tree.png["",width="100pt",align="center"]

Before we prove the lemma, we state an important corallary.

.Corrollary
***********

Let latexmath:[$v_0, v_1, v_2 \ldots v_k$] defined as in the structural lemma
above.  Then, we have latexmath:[$w(v_0)\ le w(v_1) < w(v_2) \ldots w(k-1) <
w(v_k)$] defined as in the structural lemma above.

***********




I DIDN'T WORK OUT ALL THE DETAILS BUT THERE IS NOTHING REALLY TRICKY
HERE.  NO CONCURRENCY ASSUMPTION ON THE DEQUE OPERATIONS IS MADE.


To prove this lemma, fix any deque.  The deque state and the assigned
vertex change only when either the ownter executies its assigned
vertex or a thief performs a successful steal.

The proof is by induction on the number of assigned-vertex exectuions
and steals since the deque was lat empty.

In the base case, the deque is empty and the lemma holds trivially.

For the inductive case, assume that the lemma holds before a given
assigned-node execution or a successful steal.  We will show that the
lemma holds after one.  

Let latexmath:[$v_0$] be the assigned node.

Let  latexmath:[$v_1, \ldots, v_k$] denote the vertices in the deque
and let  latexmath:[$u_1, \ldots, u_k$] be their designated parents.

By induction, we know that $u_i$ is an ancestor of $u_{i-1}$ in the
enabling tree and the ancestor relationship is proper except for $i =
1$, where it is possible that $u_0 = u_1$.


Consider the case now after an event.  Let latexmath:[$v_0'$] be the
assigned vertex and let latexmath:[$v_1', \ldots, v_{k'}'$] denote the
vertices in the deque from bottom to top and let let latexmath:[$u_1',
\ldots, u_{k'}'$] be their designated parents.

We now show that the lemma holds.

*Case 1:* The assigned node latexmath:[$v_0$] is executed. 

We have several cases to consider. 

. Execution of latexmath:[$v_0$] enables no children.  In this case,
the owner pops the bottommost vertex off its deque and makes that node
its new assigned vertex. 

.. If the deque is empty, then the owner finds no vertex in its deque
and the lemma holds trivially.

.. If the deque is not empty, then latexmath:[$v_1$] becomes the new
assigned vertex. The lemma holds.


[[dedicated::structural-popbottom]]
.Structural lemma illustrated after the owner removes the bottom vertex.
image::deques-and-enabling-tree-popbottom.png["",width="100pt",align="center"]


. Execution of latexmath:[$v_0$] enables one child latexmath:[$x$].
  In this case, latexmath:[$v_0$] becomes the designated parent of
  latexmath:[$x$].  The lemma holds.


[[dedicated::structural-popbottom]]
.Structural lemma illustrated after the assigned vertex enables one child.
image::deques-and-enabling-tree-one-child.png["",width="100pt",align="center"]



. Execution of latexmath:[$v_0$] enables two children latexmath:[$x,y$].
  In this case, latexmath:[$v_0$] becomes the designated parent of
  latexmath:[$x$].  The lemma holds.



[[dedicated::structural-popbottom]]
.Structural lemma illustrated after the assigned vertex enables two children.
image::deques-and-enabling-tree-two-children.png["",width="100pt",align="center"]


* Case 2:*  A successful steal takes place and removes the top vertex
  in the deque.  The lemma holds.


==== Analysis




===== Milestones


We define an instruction executed by some process latexmath:[$q$] as a
*_milestone_* if and only if one of the following two conditions
hold: 

. execution of a vertex by process latexmath:[$q$] occurs at that instruction, or
. a `popTop` invocation completes.

Inspect now the scheduling loop and bound the number of instructions
that a process executes between milestones.  We can observe that this
bound is constant.  


===== Rounds 

In the analysis, we shall consider the execution of each process at
the granularity of *_rounds_* rather than steps. A round completes
with the completion of a milestone. A new round starts immediately at
the beginning of the computation or immediately after the completion
of the previous round.

===== Throws 

We identify the completion of a steal attempt by its `popTop`
invocation and call a steal attempt a *_throw_*.  Note that a throw
starts and completes in the same round. It starts by the selection of
a random process from which ste


===== Bound in terms of Throws

.Lemma[Throw Bound] 
*******************

Consider any multithreaded computation with work latexmath:[$W$].  The execution
time is latexmath:[$O(W/Q + S/Q)$] where latexmath:[$S$] is the number of throws. 

*******************

.Proof
****
We shall consider the execution in terms of rounds and collect a token
from each processor scheduled in each cound.  Since rounds are a
constant number of steps, we will thus collect as many tokes as total
number of steps divided by the constant (the scheduling-quantum).

Consider the execution in terms of rounds and inspect the
corresponding milestone.

. If the milestone corresponds to the execution of a vertex, then the
processor places a token into the work bucket.

. If the milestone corresponds to the completion of a steal attempt,
then this is a throw, and the processor places a token into the throw
bucket.

. The milestone cannot be anything else.  

There are exactly latexmath:[$S$] tokens in the throw bucket and at
most latexmath:[$W$] tokens is the work bucket.  Thus the total number
of tokens is at most latexmath:[$W + S$]. The bound follows by the
definion of processor-average.

****

.NOTE 
====
THE REST OF THE ANALYSIS HAS NOT BEEN CHANGED AT ALL FOR THE DEDICATED
CASE.

====

===== Bounding the Number of Throws

Our analysis will use a potential-function based method.  We shall
divide the computation into phases each of which decreases the
potential by a constant factor.

Consider some round latexmath:[$i$] and let latexmath:[$R_i$] denote
the set of ready vertices in the beginning of that round. A vertex is
latexmath:[$R_i$] is either assigned to a process or is in a deque.
For each vertex latexmath:[$v \in R_i$], we define its *_potential_* as

. latexmath:[$\phi_i(v) = 3^{2w(v)} - 1$], if latexmath:[$v$] is assigned, or
. latexmath:[$3^{2w(v)}$], otherwise.


We define the potential at round latexmath:[$i$], written
latexmath:[$\Phi_i$] as

latexmath::[$\Phi_i = \sum_{v \in R_i}{\phi_i(v)}.$]

.Beginning and termination potential
====================================

At the beginning of the computation, the only ready vertex is the
root, which has a weight of latexmath:[$S$, because it is also the root of the
enabling tree.  Therefore the potential in the beginning of the
computation is latexmath:[$3^{2S-1}$].

At the end of the computation, there are no ready notes and thus the
potential is zero.

====================================

Let latexmath:[$R_i(q)$] denote the set of ready vertices at the
begining of round $i$] that are in the deque of the process
latexmath:[$q$] and the vertex assigned to it.  We say that any vertex
latexmath:[$v \in R_i(q)$] belongs to latexmath:[$q$].

The *_potential of process latexmath:[$q$]_* is

latexmath:[$\Phi_i(q) = \sum_{v \in R_i(q)}{\phi_i(v)}.$]

We write latexmath:[$A_i$] for the set of processes whose deques are
empty at the beginning of round latexmath:[$i$].  We write
latexmath:[$D_i$] for the set of other processes.  We can thus write
the total potential in round latexmath:[$i$] as follows

latexmath:[$\Phi_i = \Phi_i(A_i) + \Phi_i(D_i)$]

where latexmath:[$\Phi_i(X)$] is the pointwise sum, i.e.,
latexmath:[$\Phi_i(X) = \sum_{x \in X}{\Phi_i(x)}$].


Let's now consider how the potential changes during execution based on
scheduler actions. There are two cases to consider.

.  Suppose that the scheduler assign the bottom vertex latexmath:[$v$]
to a process.  In this case, the potential decreases by

[latexmath]
+++++++++++
$$
\phi_i(v) - \phi_(i+1}(v) = 3^{2w(v) - 3^{2w(v)-1} = 2/3 \phi_i(u).
$$
+++++++++++

Suppose that the scheduler executes a vertex latexmath:[$v$]. There
are several cases to consider.

.. The execution of latexmath:[$v$] enables two children
latexmath:[$x$] and latexmath:[$y$].  In this case latexmath:[$x$] is
placed in the deque and latexmath:[$y$] is assigned.  Thus the
potential decrease is

[latexmath]
+++++++++++
$$
\phi_i(v) - \phi_(i+1}(x) - \phi_(i+1}(y) = 3^{2w(v)} -
 3^{2w(v)-2} - 3^{2w(v)-3} = 3^{2w(v)} (1 - 1/3 - 1/9) = 5/9 \cdot
 \phi_i(v).
$$
+++++++++++

.. The execution of latexmath:[$v$] enables less than two children.
In this case the potential decreases more.

We are now going to show that after latexmath:[$P$] throws the total
potential decreases with constant probability.

.Lemma[Top-Heavy Deques]
************************

Consider any round latexmath:[$i$] and any process latexmath:[$q \in
D_i$].  The topmost vertex in latexmath:[$q$]'s deque contributes at
least latexmath:[$3/4$] of the potential of process latexmath:[$q$].

************************

This lemma follows directly from the structural lemma.  The case in
which the topmost vertex latexmath:[$v$] contributes the least of the
process is when the assigned node and latexmath:[$v$] have the same
designated parent.  In this case, we have

[latexmath]
+++++++++++
$$
\Phi_i(q) = \phi_i(v) + \phi_i(x) = 3^{2w(v)} + 3^{2w(x)-1} =
3^{2w(v)} + 3^{2w(v)-1} =  (4/3) \phi_i(v).
$$
+++++++++++

.Lemma[Balls and Bins]
**********************

Suppose that latexmath:[$P$] balls are thrown uniformly and randomly
into latexmath:[$P$ bins, where bin latexmath:[$1 \le i \le P$] has
weight latexmath:[$W_i$], and latexmath:[$W = \sum_{i=1}^{P}{W_i}$].  For
each bin, define the random variable

[latexmath]
+++++++++++
$$
X_i = \left\{
\begin{array}{ll}
W_i & \mbox{if a ball lands in bin}~i
\\
0 & \mbox{otherwise}
\end{array}
\right.
$$
+++++++++++

If latexmath:[$X = \sum_{i=1}^{P}{X_i}$], then for any latexmath:[$\beta, 0 < \beta  1$], we
have latexmath:[$\Pr{X \ge \beta W} > 1 - (1/((1-\beta)e)$].

************************

The proof of the lemma is a relatively straightforward application of
Markov's inequality.  Consider the random variable latexmath:[$W_i - X_i$].  This
random variable takes on the value latexmath:[$0$] if a ball lands in bin latexmath:[$i$] and
$W_i$] otherwise.  Thus, 

$E[W_i - X_i]  = W_i \cdot (1-1/P)^P \le W_i / e.$

It follows that 
$E[W - X ] \le W / e$].

By Markov's inequality we have 

$\Pr{W-X > (1-\beta) W} \le \frac{E[W-X]}{(1-\beta)W}$], and thus
$\Pr{X < \beta W } < \frac{1}{(1-\beta)e}.$


.Lemma: Global Potential
*******

Consider any round latexmath:[$i$] and any later round latexmath:[$j$]
such that at least latexmath:[$P$] throws occur at rounds from
latexmath:[$i$] (inclusive) to latexmath:[$j$] (exclusive). Then, we
have

[latexmath]
+++++++++++
$$
\Pr{\Phi_i - \Phi_j \ge \frac{1}{4} \Phi_i(D_i)} > \frac{1}{4}.
$$
+++++++++++
*******

.Proof:
****

*First* we use the Top-Heavy Deques Lemma to establish:

If a throw targets a process with a nonempty deque as its victim, then
the potential decreases by at least of a half of the potential of the
victim.

Consider any process latexmath:[$q$] in latexmath:[$D_i$] and let
latexmath:[$u$] denote the vertex at the top of its deque at round
latexmath:[$i$].  By Top-Heavy Deques Lemma, we have $\phi_i(u) \ge
\frac{3}{4} \Phi_i(q)$].

Consider any throw that occurs at round latexmath:[$k \ge i$].

. Suppose that this throw is sucessful with `popTop` returning a
vertex.

.. If the returned vertex is latexmath:[$u$], then after round
latexmath:[$k$], vertex latexmath:[$v$] has been assigned and possibly
executed. Thus, the potential has decreased by at least
latexmath:[$\frac{2}{3}\, \phi_i(u)$].

.. If the returned vertex is not latexmath:[$u$], then latexmath:[$u$]
is already assigned and possibly executed. Thus, the potential has
decreased by at least latexmath:[$\frac{2}{3}\, \phi_i(u)$].

. Suppose that the throw is not succesful, and `popTop` returns
`NULL`.  In this case, we know that latexmath:[$q$'s deque was empty
during `popTop`, or some other `popTop` or `popBottom` returned
latexmath:[$u$].  In all cases, vertex latexmath:[$u$] has been
assigned or possibly executed by the end of round latexmath:[$k$] and
thus, potential decrases by latexmath:[$\frac{2}{3}\, \phi_i(u)$].


Thus, we conclude that if a thief targets a process latexmath:[$q \in
D_i$] as victim at round latexmath:[$k \ge i$], then the potential
decreases by at least

[latexmath]
+++++++++++
$$
\frac{2}{3}\, \phi_i(u) \ge \frac{2}{3} \frac{3}{4} \Phi_i(q)  =
\frac{1}{2} \Phi_i(q).
$$
+++++++++++

*Second*, we use Ball and Bins Lemma to establish the total decrease
 in potential.

Consider now all latexmath:[$P$] processes and latexmath:[$P$] throws
that occur at or after round latexmath:[$i$].  For each process
latexmath:[$q$] in latexmath:[$D_i$], assign a weight of
$\frac{1}{2}\Phi_i(q)$] and for each process in latexmath:[$A_i$], we
assign a weight of latexmath:[$0$].  The total weight is thus
latexmath:[$\frac{1}{2} \Phi_i(D_i)$].  Using the Balls-and-Bins
Lemman with latexmath:[$\beta = 1/2$], we conclude that the potential
decreases by at least latexmath:[$\beta W = \frac{1}{4} \Phi_i(I_i)$]
with probability greater that latexmath:[$1 - \frac{1}{(1-\beta) e)} >
\frac{1}{4}$].

****

.Theorem: Dedicated Environments
****

Consider any multithreaded computation with work latexmath:[$W$] and
span latexmath:[$S$] and execute it with non-blocking work stealing
with latexmath:[$P$] processes in a dedicated environment.  The
exection time is

. latexmath:[$O(W/P + S)$] in expectation, and 

. latexmath:[$O(W/P + S + \lg{1/\epsilon})$] with probability at least
latexmath:[$1-\epsilon$] for any latexmath:[$\epsilon > 0$].

****

.Proof
****

The Throw-Bound Lemma bounds the execution time in terms of throws.
We shall prove bounds on the number of throws.


We break execution into *_phases_* of latexmath:[$\Theta(P)$] throws.
We show that with constant probability, a phase causes the potential
to drop by a constant factor, and since we that the the potential
starts at $\Phi_0 = 3^{2S -1}$] and ends at zero, we can bound the
number of pases.

The first phase begins at round latexmath:[$t_1 = 1$] and ends at the
first round latexmath:[$t_i'$], where at least latexmath:[$P$] thorws occun
during the interval latexmath:[$[t_1,t_1']$].  The second phase begins at round
latexmath:[$t_2 = t_1' + 1$] and so on.

Consider a phase latexmath:[$[i,j)$], where the next round begins at
round latexmath:[$j$].  We show that latexmath:[$\Pr{\Phi_j \le
\frac{3}{4} \Phi_i} < \frac{1}{4}$].

Recall that the potential can be partitioned as latexmath:[$\Phi_i =
\Phi_i(A_i) + \Phi_i(D_i)$].

. Since the phase contains at least latexmath:[$P$] throws, we know
that latexmath:[$\Pr{\Phi_i - \Phi_j \ge \frac{1}{4} \Phi_i(D_i)} >
\frac{1}{4}$].

. We need to shaw that the potential also drops by a constant fraction
of latexmath:[$\Phi_i(A_i)$].  Consider some process latexmath:[$q$]
in latexmath:[$A_i$].  If latexmath:[$q$] does not have an assigned
note, then latexmath:[$\Phi_i(q) = 0$].  If latexmath:[$q$] has an
assigned node latexmath:[$u$], then latexmath:[$\Phi_i(q) =
\phi_i(u)$].  In this case, process latexmath:[$q$] executes node
latexmath:[$u$] at round latexmath:[$i$] and the potential drops by at
least latexmath:[$\frac{5}{9} \phi_i(u)$].  Summing over all processes
in $A_i$], we have latexmath:[$\Phi_i - \Phi_j \ge \frac{5}{9}
\Phi_i(A_i)$].

Thus we conclude that latexmath:[$\Pr{\Phi_i - \Phi_j \ge \frac{1}{4}
\Phi_i} > \frac{1}{4}$].  In other words, we have established that in
any phase, potential drops by a quarter with some probability
latexmath:[$\frac{1}{4}$].


DONT WE NEED SOME BOUND ON j. MAYBE IT IS GREATER THAN i.


Define a phase to be *_successful_* if it causes the potential do trop
by at least a quarter fraction.  We just established that phase is
successful with probability at least latexmath:[$0.25$]. Since the
start potential latexmath:[$\Phi_0 = 3^{2S -1}$] and ends at zero and is always
an integer, the number of successful phases it as most
latexmath:[$(2S-1)\, \log_{4/3}{3} < 8 S$].

DO WE NEED THE INTEGER ASSUMPTION HERE? 

Thus, the expceted number of phases is latexmath:[$O(S)$] and since
each contains latexmath:[$O(P)$] throws, the expected number of throws is
latexmath:[$O(SP)$].

WHY O(P) and not just P? 


We now establish the high-probability bound.  

Suppose that the execution takes latexmath:[$n = 32S + m$] phases.
Each phase succeds with probability at least latexmath:[$p =
\frac{1}{4}$], so the expceted number of successes is at least
latexmath:[$np = 8S + m/4$].  Let latexmath:[$X$] the number of
successes.  By Chernoff bound

[latexmath]
+++++++++++
$$
\Pr{X < np -a} < e^{-a^2/2np},
$$
+++++++++++

with latexmath:[$a = m/4$].  Thus if we choose latexmath:[$m = 32S + 16 \ln{1/epsilon}$], then we have

[latexmath]
+++++++++++
$$
\Pr{X < 8 S} < e^{-(m/4)^2 / (16S + m/2)} 
\le  e^{-(m/4)^2 / (m/2 + m/2)} 
=  e^{-m/16}
\le  e^{-16\ln{1/\epsilon}/16}
= \epsilon.
$$
+++++++++++

Thus the probabilty that the executian takes latexmath:[$64S + 18
\ln{1/epsilon)}$] phases or more is less than latexmath:[$\epsilon$].

We conclude that the number of throws is latexmath:[$O(S +
\lg{1/\epsilon}P)$] with probability at least latexmath:[$1 -
\epsilon$].

****

//////////////////////////////////////////////////////////////////////
