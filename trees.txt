[[ch:trees]]
== Chapter: Tree Computations

Trees are a basic structure for representing relations.  It is thus
 natural to ask whether we can compute various properties of trees in
 parallel.

=== Computing In-Order Traversals with Divide-and-Conquer and Contraction

As our first motivating example, let's consider the following
question: we are given a binary tree latexmath:[$T$] and asked to
determine the *_in-order rank_* of each node in the tree, defined as
the order of the node in an in-order traversal of the tree.  We shall
use this example to develop several key ideas.

As two important special cases of this problem, let's consider a
complete binary tree, where each internal node has exactly two
children and a chain, where each internal node has exactly one
child. A complete binary tree is a balanced tree whereas a chain is an
unbalanced tree.

.In-Order Traversal 
====
image:jpgs-620H/perfect-binary-tree-8.jpg["An example complete binary tree",width="350pt",align="center"]

An in-order traversal of the complete binary tree above traverses the
nodes in the following order: *a,b,c,d,e,f,g,h,i,j,k,l,m,n,o*.  

====

Let's apply two algorithm design techniques to this problem: divide
and conquer and contraction.

For divide and conquer, we can use a two-pass algorithm:

. First pass: compute the size of each subtree in the
tree. 

. Second pass: Compute the in-order ranks by traversing the tree from
root to leaves as we propagate to each subtree in-order rank of its
root, which can be calculated based on the sizes of the left and the
right subtrees.


The first phase of the divide-and-conquer algorithm proceeds by
computing the recursively the sizes of each subtree in parallel, and
the computing the size for the tree by adding the sizes and adding one
for the root. Similarly, the second phase of the algorithm computes
the rank of the root as the size of the left-subtree (assuming we are
counting rank's from zero) plus an offset (initially zero), and
recurses  on the left and the right subtrees.  For the left subtree,
the offset is the same as the offset of the root and for the right
subtree, the offset is the calculated by adding the size of the left
subtree plus one.   


.Two-Pass Algorithm for Computing Ranks
====

image:jpgs-620H/perfect-binary-tree-8-inorder-ranks.jpg["Compting ranks",width="400pt",align="center"]

In the example tree above, each node is labeled with the size of its
subtree computed in the first pass and each edge is labeled with the
offset computed in the second pass.  

====


If the tree is balanced, as for example in our example, we can show
that this algorithm performs latexmath:[$O(n)$] work in
latexmath:[$O(\lg{n})$] span.  If however, the tree is not balanced
the algorithm can do poorly, requiring as much as latexmath:[$O(n)$]
span.


.Divide and Conquer on Chains
====
image:jpgs-620H/chain-9.jpg["An example chain",width="300pt",align="center"]

An in-order traversal of a chain of nodes yields *a,b,c,d,e,f,g,h,i*
assuming that the left child of each node is "empty." The
divide-and-conquer algorithm would require linear span on this
example.

====

Another technique we have seen for parallel algorithm design is
contraction. Appling the idea behind this technique, we want to
"contract" the tree into a smaller tree, solve the problem for the
smaller tree, and "expand" the solution for the smaller tree to
compute the solution for the original tree.

There are several ways to contract a tree.  One way is to "fold" or
"rake" the leaves to generate a smaller tree.  Another way is to
"compress" long branches of the tree removing some of the nodes on
such longe branches. 

==== Rake Operation

Lets define a *_rake_* as an operation that when applied to a leaf
deletes the leaf and stores its size in its parent. With some care, we
can rake all the leaves in parallel: we just need to have a place for
each leaf, sometimes called a *_cluster_*, to store their size at
their parent so that the rakes can be performed in parallel without
interfence.  

Using the rake operation, we can give an algorithm for computing the
in-order traversal of a tree:

. *Base case:*  The tree has only one node, compute the result.

. *Contraction step:*  Rake all the leaves to contract the tree.

. *Recursive step:* Solve the problem for the contracted tree.

. *Expansion step:* "Reinsert" the raked leaves to compute the result
for the input tree.


.Contraction with Rake
====

image:jpgs-620H/perfect-binary-tree-8.jpg["Computing ranks",width="400pt",align="center"]

Given the example tree above, we rake all the leaves and store their
size in clustered stored in the parents.  For the drawings we draw
the clusters on the edges.

image:jpgs-620H/perfect-binary-tree-8-rake-1.jpg["Computing ranks",width="400pt",align="center"]

We can rake the leaves again.

image:jpgs-620H/perfect-binary-tree-8-rake-2.jpg["Computing ranks",width="400pt",align="center"]

And again, until we reach a tree with a single node.  We can then
compute the rank of the node as the size of its subtree.

image:jpgs-620H/perfect-binary-tree-8-rake-3.jpg["Computing ranks",width="400pt",align="center"]

====

.Expansion with Rake
====

Having reached the base case by contractions, we then perform
expansion steps to compute the result for the original tree.

image:jpgs-620H/perfect-binary-tree-8-rake-3.jpg["Computing ranks",width="400pt",align="center"]

As we expand, we compute the in order traversal for the tree
constructed by "expanding" the tree out.
  
image:jpgs-620H/perfect-binary-tree-8-rake-2-expand.jpg["Computing ranks",width="400pt",align="center"]

Each expansion corresponds to the a contraction step.

image:jpgs-620H/perfect-binary-tree-8-rake-1-expand.jpg["Computing ranks",width="400pt",align="center"]

The expansion step completes when all the contractions are reversed.

image:jpgs-620H/perfect-binary-tree-8-expand.jpg["Computing ranks",width="400pt",align="center"]

====

Let's calculate the work and span of this algorithm assuming that we
have a complete binary tree, which is a tree where all internal nodes
have exactly two children and all the leaves are collected at the last
two levels of the tree.  Since a complete binary tree is a full binary
tree, raking all the leaves removes half of the nodes.  Thus we can
write the work recursion as latexmath:[$W(n) = W(n/2) + n$].  This
solves to latexmath:[$W(n) = O(n)$].  Since complete trees are
balanced, for the span we have latexmath:[$S(n) = S(n/2) + \log{n}$].
This solves to latexmath:[$S(n) = O(\lg^2{n})$].



==== Compress Operation

The contraction algorithm based rake operations performs well for
complete binary trees but on unbalanced trees, the algorithm can do
verp poorly. In fact, the contraction algorithm requires
latexmath:[$O(n^2)$] work and latexmath:[$O(n^2)$] span on a chain,
which is a degenerate tree.

Let's consider the worst-case example of the chain and design a
different contraction algorithm that works well just on chains.

Define *_compress_* as an operation that when applied to a node
latexmath:[$u$] with a single child latexmath:[$v$] and parent
latexmath:[$w$] deletes latexmath:[$u$] and the edges incident on it
and inserts an edge from the parent to the child, i.e.,
latexmath:[$(w,v)$].  To incorporate into the computation the
contribution of the compressed vertex, we can construct a *_cluster_*,
which for example, can be attached to the newly inserted edge.  For
the in-order traversal example, this cluster will simply be a weight
corresponding to the size of the deleted nodes.  Initially all edges
have weight latexmath:[$0$].


Using compress operation, we wish to be able to contract a tree to a
smaller tree in parallel. Since a compress operation updates the two
neighbors of a compressed node, we need to be careful about how we
apply these operations.  One way do this is to select in each round an
independent set of nodes (nodes with no edges in between) and compress
them.

Based on this idea, we can give an algorithm for computing the
in-order traversal of a chain:

. *Base case:* The chain consists of a single edge, compute the
result.

. *Contraction step:* Compress an independent set of internal nodes to
obtain a contracted chain.

. *Recursive step:* Solve the problem for the contracted chain.

. *Expansion step:* "Reinsert" the compressed nodes to compute the
result for the input chain.


To maximize the amount of contraction at each contraction step, we
want to select a maximal independent set and do so in parallel.  There
are many ways to do this, we can use a deterministic algorithm, or a
randomized one.  Here, shall use randamization.  The idea is to flip
for each node a coin and select a vertex if it flipped heads and its
child flipped tails. This idea of using randomization to make parallel
decisions is sometimes called *_symmetry breaking_*. 

.Contraction with Compress
====

image:jpgs-620H/chain-9.jpg["Computing ranks",width="300pt",align="center"]

In the example chain above, we compress every other internal node to
obtain the new chain below.

image:jpgs-620H/chain-9-compress-1.jpg["Computing ranks",width="300pt",align="center"]

We then repeat this process.

image:jpgs-620H/chain-9-compress-2.jpg["Computing ranks",width="300pt",align="center"]

And repeat it again until we are down to a single edge at which point
we can solve the problem.

image:jpgs-620H/chain-9-compress-3.jpg["Computing ranks",width="300pt",align="center"]

====


.Expansion with Compress
====

Having contracted the chain down to a single edge, we start the
expansion phase, where we "re-insert" the deleted nodes to compute the
result for the expanded tree.

image:jpgs-620H/chain-9-compress-3.jpg["Computing ranks",width="300pt",align="center"]

At each expansion step, to compute the result for the re-inserted
nodes, we use the pre-computed result for the clusters adjacent to
them.

image:jpgs-620H/chain-9-compress-2-expand.jpg["Computing ranks",width="300pt",align="center"]


image:jpgs-620H/chain-9-compress-1-expand.jpg["Computing ranks",width="300pt",align="center"]

Expansion completes when we expand back the input tree. 

image:jpgs-620H/chain-9-expand.jpg["Computing ranks",width="300pt",align="center"]

====

Since the algorithm is randomized its analysis requires some care.


For the analysis, we shall make two assumptions:

. all rounds are independent: the source of randomness in each round
is fully independent of the other rounds, and

. coin flips are pairwise independent: the outcome of one coin flip
does not affect that of any other coin flip.

Let latexmath:[$F_i$] be a random variable denoting the fraction of
internal nodes of the chain that are not compressed at round
latexmath:[$i$].  We know that the probability that a node is
compressed is latexmath:[$1/4$].  We thus know that latexmath:[$E
\lbrack F_i \rbrack = m / (m - m/4) = 3/4$] for all latexmath:[$i$].


Let latexmath:[$X_i$] be a random variable denoting the size of the
tree at round latexmath:[$i$].  

We have

[latexmath]
+++++++++++
$$
X_i = n \cdot \Pi_{j=1}^i{F_i}.
$$
+++++++++++

Since all rounds are independent, latexmath:[$F_i$]'s are independent
and thus we can write:

[latexmath]
+++++++++++
$$
E \lbrack X_i \rbrack = n \cdot \Pi_{j=1}^i{E \lbrack F_i \rbrack} =
\frac{3}{4}^i \cdot n.
$$
+++++++++++



Since we perform constant work per node in each round, we can bound
the work as follows.

[latexmath]
+++++++++++
$$
\begin{array}{lll}
W(n) & \le & \sum_{i = 1}^{\infty}{X_i}
\\
E \lbrack W(n) \rbrack & \le & \sum_{i = 1}^{\infty}{\frac{3^i}{4^i} \cdot n}
\\
E \lbrack W(n) \rbrack & \le & O(n).
\end{array}
$$
+++++++++++

Note that for this bound, we made the conservative assumption that the
computation continues infinitely.  This still gives us a tight bound
because we the size of the input decreases geometrically.  We thus
conclude that the algorithm is work efficient.

To bound the span, we need a high-probability bound.  Let's consider
the probability that the number of nodes is non-trivial after
latexmath:[$i = 10 \lg{n}$] rounds.  By Markov's inequality we have


[latexmath]
+++++++++++
$$
\begin{array}{lll}
P \lbrack X_i \ge 1 \rbrack 
& \le & 
E \lbrack X_i \rbrack / 1  =
\\
& \le & 
\frac{3}{4}^{10\lg{n}}
\\
& \le & 
n^{-3}.
\end{array}
$$
+++++++++++

This means that after latexmath:[$10\log{n}$] rounds, the probability
that the tree constains more than a few nodes is tiny.  We can thus
state with high probability that the algorithm terminates after
latexmath:[$O(\log{n})$ rounds. If it does not, we know that we can
always solve the problem using a linear work algorithm.
We can thus write our span bound as follows.


 
[latexmath]
+++++++++++
$$
S(n) = 
\left\{ 
\begin{array}{ll}
R & \mbox{if}~ R \le 10\lg{n}
\\
n & \mbox{otherwise} 
\end{array}
\right.

$$
+++++++++++

By conditioning on a random variable latexmath:[$R$] denoting the
number of rounds we can bound span as follows.

[latexmath]
+++++++++++
$$
\begin{array}{lll}
E \lbrack S(n)] 
& \le & 
E \lbrack S(n) | R \le 10\lg{n} \rbrack  \cdot P  \lbrack  R \le 10\lg{n}  \rbrack  
+
E \lbrack S(n) | R > 10\lg{n} \rbrack  \cdot P  \lbrack  R > 10\lg{n}  \rbrack  
\\
& \le & 
10 \lg{n} \cdot (1-1/n^{3}) 
+ 
n \cdot 1/n^3.
\\
& \le & 
O(\lg{n}).
\end{array}
$$
+++++++++++


//////////////////////////////////////////////////////////////////////

// The method blow is a broken analysis.  It ought to use conditional
// expectations by casing over X_i's.  It does not and ends up being
// sloppy and dangerous.

For instructive purposes we will discuss another method, which we
don't recommend.

Since we know that latexmath:[$F_i = 3/4$] for all latexmath:[$i$] and
since latexmath:[$F_i$] and latexmath:[$X_i$] are independent, we
have:

[latexmath]
+++++++++++
$$
X_{i+1}=  F_i \cdot X_i,~\mbox{and thus}
\\
E \lbrack X_{i+1} \rbrack =  3/4 \cdot X_i \brack.
$$
+++++++++++

Above, we took expectations over only the random choices for a fixed
input size latexmath:[$X_i$].  Since latexmath:[$X_i$] is a random
variable latexmath:[$E[X_{i+1}]$] is itself a random variable, and
thus we can take the expectation over that variable.  

[latexmath]
+++++++++++
$$
E \lbrack E \lbrack X_{i+1} \rbrack  \rbrack  =  3/4 \cdot E \lbrack X_i \rbrack .
\\
E \lbrack X_{i+1} \rbrack  =  3/4 \cdot E \lbrack X_i \rbrack .
$$
+++++++++++

We used here the independence of latexmath:[$F_i$] from
latexmath:[$X_i$] and did so very quietly.  This makes this approach
dangerous.  A sloppy application of this method can lead to
multiplying expectations of dependent random variables.

This yields a recursive equation, which we can solve as latexmath:[$E
\lbrack X_i \rbrack = \frac{3}{4}^i \cdot n $] and thus
latexmath:[$E \lbrack W(n) \rbrack = O(n)$]

//////////////////////////////////////////////////////////////////////

=== Tree Contraction

In this chapter thus far, we have seen that we can compute the
in-order rank a complete binary tree, which is a perfectly balanced
tree, by using a contraction algorithm that rakes the leaves of the
tree until the tree reduces to a single vertex.  We have also seen
that we can compute in-order ranks of nodes in a worst-case unbalanced
tree, a chain, by using a contraction algorithm that compresses nodes
with single child's until the tree reduces to a single edge.

We will now see that we can in fact compute in-order ranks for any
tree, balanced or unbalanced, by simultaneously applying the same two
operations recursively in a number of rounds.  Each round of
application rakes the leaves and selects an independent set of nodes
to compress until the tree contracts down to a single node.  After the
contraction phase completes, the expansion phase starts, proceeding in
rounds, each of which reverses the corresponding contraction round by
reinserting the compressed and raked nodes and computing the result
for the corresponding tree.

.Algorithm: Tree Contraction
****
[source, {cpp}]
----
tree_contract (T)
if |T| = 1 
  solve/expand T
else
    TT = rake leaves of T
    TTT = compress and independent set of nodes with a single child in TT
    tree_contract (TTT)
    expand to TT
    expand to T
----
****  

To select the independent set of single-child nodes to compress, we
use the same randomization technique as in chains: each node flips a
coin and a single-child node is selected if it flips heads and its
child flips tails.

Since expansion is symmetric to contraction and since we have already
discussed expansion in some detail, in the rest of this chapter, we
shall focus on contraction.

[[ex:trees::tree-contraction::unbalanced]]
.Tree Contraction 
====
An example tree contraction illustrated on the  input tree below.
Random coin flips are not illustrated.


image:jpgs-620H/unbalanced-binary-tree-6.jpg["Input tree",width="350pt",align="center"]

The first round rakes the nodes *a, c, e, g, m, o* and compresses *i, k*,
resulting in the tree below.

image:jpgs-620H/unbalanced-binary-tree-6-tc-1.jpg["Tree contraction, round 1",width="350pt",align="center"]


The second round rakes the nodes *b, f, n* and compresses *j*,
resulting in the tree below.

image:jpgs-620H/unbalanced-binary-tree-6-tc-2.jpg["Tree contraction, round 2",width="350pt",align="center"]


The third round rakes the nodes *d, l* and compresses no nodes,
resulting in a tree with a single node, thus completing the
contraction phase.

image:jpgs-620H/unbalanced-binary-tree-6-tc-3.jpg["Tree contraction, round 3",width="350pt",align="center"]
====

To analyze the tree-contraction algorithm, we start by establishing a
key lemma that says that each round of tree contraction reduces the
expected number of nodes in the tree by a factor of latexmath:[$3/4$].

.Lemma [Contraction Ratio]
****

Consider a tree with latexmath:[$n$] nodes, one round of tree
contraction yields a tree which has no more than latexmath:[$3n/4$]
nodes in expectation.

****

.Proof
****

Partition the nodes in latexmath:[$T$] into four disjoint sets

. latexmath:[$R$]: singleton set containing the root.

. latexmath:[$V_0$]: set of nodes with latexmath:[$0$] children, i.e.,
the leaves.

. latexmath:[$V_1$]: set of nodes with latexmath:[$1$] child.

. latexmath:[$V_2$]: set of nodes with latexmath:[$2$] children.

Let's further partition latexmath:[$V_1$] into three disjoint sets:

. latexmath:[$V_{10}$]: set of nodes with latexmath:[$1$] child, where
the child has no other children.

. latexmath:[$V_{11}$]: set of nodes with latexmath:[$1$] child, where
the child has one child.

. latexmath:[$V_{12}$]: set of nodes with latexmath:[$1$] child, where
the child has two children.


By construction, we know the set of nodes latexmath:[$V$] of the tree
can be written as 

[latexmath]
+++++++++++
$$
V = R \cup V_0 \cup V_{10} \cup V_{11} \cup V_{12} \cup V_2.
$$
+++++++++++

Let's not consider the nodes in the set latexmath:[$V_{11} \cup
V_{12}$].  These are exactly the nodes an independent subset of which
we compress.  What fraction of them are compressed, i.e., deleted?
The probability that a particular node is selected as part of the
independent set is latexmath:[$1/4$].  Thus latexmath:[$3/4$] fraction
of these vertices remain live at the end of this round.

Let's now consider the remaining nodes, i.e., 
latexmath:[$R \cup V_0 \cup V_{10}  \cup V_2$].

We have the following relationships between these sets.

. latexmath:[$|V_{10}| \le |V_0|$], because the second set is a
superset of the first.

. latexmath:[$|V_{2}| +1 = |V_0|$], which can be proven by strong
induction on the size of trees.

Since latexmath:[$R$] is a singleton, we have latexmath:[$|R \cup V_0 \cup V_{10}  \cup V_2| \le 3|V_0|$].  

Since all the leaves are raked, a fraction latexmath:[$2/3$] of these
vertices remain live at the end of this round.

We have thus partitioned the set of all nodes into two subsets and
showed that a fraction of at most latexmath:[$3/4$] (expected) and
latexmath:[$2/3$] remain live at the end of the round.  We thus
conclude that in expectation latexmath:[$3/4$] of the nodes remain live.
****

.Theorem[Work and Span of Tree Contraction]
****

Assuming that all rake, compress, and expansion operations complete in
latexmath:[$O(1)$] work, tree contraction performs latexmath:[$O(n)$]
expected work in latexmath:[$O(\lg{n})$] expected span.

****

.Proof
****

The proof of this theorem is essentially the same as the proof for
chains given above.  For brevity, we don't repeat the proof.

****


=== Applications of Tree Contraction

In order to apply tree contraction to solve a particular problem, we
need to determine how various operation in tree contraction manipulate
the application data, specifically the following:

. the computation performed by a  rake operation,
. the computation performed by a compress operation, 
. the computation performed for expanding singleton tree,
. the computation performed for expanding raked nodes, and
. the computation performed for expanding compressed nodes.

To specify these it is often helpful to view the tree contraction
algorithm as a hierarchical clustering of the input tree
latexmath:[$T$]. 

. We view a rake operation as constructing a *_unary cluster_*, which
correspond to a subtree rooted at a node latexmath:[$u$] of the tree
latexmath:[$T$] along with the edge between latexmath:[$u$] and its
parent; we refer to latexmath:[$u$] as the boundary of the unary
cluster.  The simplest unary cluster consists of a leaf in the tree and
the edge from the parent.

. We view the compress operation as construction a *_binary cluster_*,
which corresponds to a subtree of the tree latexmath:[$T$] that is
defined by two nodes latexmath:[$u$] and latexmath:[$v$] where
latexmath:[$v$] is a proper descendant of latexmath:[$u$].  Such a
binary cluster consists of the subtree induced by the all the proper
descendants of latexmath:[$u$] except for the descendants of
latexmath:[$v$] and the edge that connects latexmath:[$v$] to the
parent and the edge that connects latexmath:[$u$] to its child.

Based on this view, for a tree where each node has at most
latexmath:[$d$] children, we can specify a rake operation as
constructing a unary cluster by combining latexmath:[$d-1$] unary
clusters and one binary cluster by also taking into account the label
of the node being raked.  Similarly, we can specify a compress
operation as constructing a binary cluster by combining
latexmath:[$d-1$] unary clusters with two binary clusters by also
taking into account the label of the node being compressed.

.Hierarchical Clustering via Tree Contraction
====

The figure below illustrates a hierarchical clustering of the example
tree from the <<ex:trees::tree-contraction::unbalanced, example
above.>> Clusters constructed during earlier rounds are nested inside
those constructed in later rounds.  Each edge of the tree represents a
binary cluster and each node represents a unary cluster.

image:jpgs-620H/unbalanced-binary-tree-6-clustering.jpg["Clustering
via tree contraction",width="450pt",align="center"]

This clustering can be represented as a balanced tree of clusters.
We can thus say that tree contraction maps an arbitrary possibly
unbalanced trees to balanced trees (of clusters).


====

A classic application of tree contraction is the expression trees
problem.  In this problem, we use a tree to represent a mathematical
expression and are asked to compute the value the expression. To solve
this problem, we can use tree contraction with rake and compress
operations.  To this end, we  first need to determine the definitions
for the unary and binary clusters. Let's assume for this example that
the expression is the addition and multiplication of a number of
integers as can be represented by a tree where leaves are integers and
internal nodes are plus or multiplication operations as shown in the
example below.

.Tree Contraction for an expression tree 
====
Consider the expression

[latexmath]
+++++++++++

$$
(1+2) \cdot (3 + 4) 
+ 
\left(
\left( 5 + ( 7 + ( (10 + 11) \cdot 9 ) \right) 
\cdot 
6 
\right)
.
$$

+++++++++++
The expression tree shown below represents  this expression 

image:jpgs-620H/unbalanced-expression-tree.jpg["An expression tree",width="350pt",align="center"]

==== 

By remembering that unary clusters represent subtrees of the tree
rooted at a node, we can see that a natural definition for a unary
cluster is the value of the corresponding subexpression.  Determining
the value for a binary cluster is a bit more tricky. Recall that a
binary cluster is a sub-tree induced by a set of nodes between two
nodes in the tree.  What should such a structure reduce to?  After
some reflection, we can see that such a subtree "transforms" the value
at its lower boundary node by applying a linear transformation of the
form latexmath:[$a \cdot x + b$], where latexmath:[$a,b$] are
integers.

To apply tree contraction, we first annotate the initial values for
each binary cluster, which is the identity functions written as
latexmath:[$x$]. The initial values for unary clusters can be defined
as the value stored at the leaf.

image:jpgs-620H/unbalanced-expression-tree-round-0.jpg["An expression tree",width="350pt",align="center"]

In the first round, we perform a number of rakes and update the
corresponding clusters.  

image:jpgs-620H/unbalanced-expression-tree-round-1.jpg["An expression tree",width="350pt",align="center"]

In the second round, we perform a number of rakes and one compress and
update the corresponding clusters. 

image:jpgs-620H/unbalanced-expression-tree-round-2.jpg["An expression tree",width="350pt",align="center"]

In the third round, we again perform a number of rakes and one
compress and update the corresponding clusters.

image:jpgs-620H/unbalanced-expression-tree-round-2.jpg["An expression tree",width="350pt",align="center"]


It is important the expressions on the binary clusters have the form
latexmath:[$ax+b$] where latexmath:[$a$] and latexmath:[$b$] are
constants.  As a result, as tree contraction progresses, expressions
do not grow into larger expressions, rather they can be simplified
into a simple form. This is crucial is making sure that rake and
compress operations require constant work.


Another broad class of tree computations include *_treefix
computations_*, which generalize the "prefix sum" or the
"scan" example for sequences to rooted trees by separately considering
the two possible directions:

. from root to leaf, which are called rootfix computations, and 

. from leaf to root, which are called leaffix computations.

For the rest of this section, we shall assume binary trees.

==== Rootfix computations

Let latexmath:[$\oplus$] be an associative binary operation.  A
*_rootfix computation_* on a binary tree latexmath:[$T$] computes the
latexmath:[$\oplus$]-sum for all the (simple) paths from the root of
latexmath:[$T$] to all the leaves of latexmath:[$T$].

.Maximum on root-to-leaf path
====

Suppose that we are given a binary tree where each node is labeled
with an integer number.  We wish to compute for each leaf in the tree
the maximum node from the leaf to the root.  An example tree and the
result to be computed are shown below.  This computation is a rootfix
computation with "max" operation on integers.

image:jpgs-620H/unbalanced-binary-tree-6-max-rootfix.jpg["Maximum node on root-to-leaf paths",width="350pt",align="center"]

====

We can use tree contraction to perform a rootfix computation.  To this
end, we define each binary cluster to represent the maximum node on
the path between the boundary nodes of the cluster. Initially each
edge is a binary cluster with an empty path and thus has the initial
value of latexmath:[$-\infty$].  We don't define any specific value
for unary cluster.  We then define the rake and compress operations as
follows.

. Compress operation: take the maximum of the deleted clusters and the
deleted node and assign that value to the new binary cluster created.

. Rake operation: no specific computation on unary clusters is needed.

At the expansion steps, we compute the correct values for raked and
compressed operations by considering parent of the deleted vertex and
the weight of the incoming edge and taking the maximum.

.Exercise
****

Complete the example given above to compute the maximums for the root
to leaf paths using tree contraction.

**** 
 

==== Leaffix computations

Let latexmath:[$\oplus$] be an associative binary operation.  A *_leaf
computation_* on a binary tree latexmath:[$T$] computes for each node
in latexmath:[$T$], the latexmath:[$\oplus$]-sum of the in-order
traversal of the subtree rooted at that node.


.Maximum in a subtree
====

Suppose that we are given a binary tree where each node is labeled with an
integer number.  We wish to compute for each subtree rooted at a node
in the tree the maximum node in that subtree.  An example tree and the
result to be computed are shown below.  This computation is a rootfix
computation with "max" operation on integers.

image:jpgs-620H/unbalanced-binary-tree-6-max-leaffix.jpg["Maximum node
in each rooted subtree",width="350pt",align="center"]

====

We can use tree contraction to perform a leaffix computation.  

.Exercise
****

Specify the unary and binary clusters for performing the leaffix-max
computation.  Describe how rake and compress operations should behave
and how expansion works.


****



.Exercise
****

Specify the necessary operations to compute the in-order rank of the
nodes in a tree.  

. What information does a unary cluster contain? 
. What information does binary cluster contain? 
. What computation should rake and compress perform? 
. How should expansion work? 

****




/////
=== Euler Tour Trees

Recall the definiton of <<sec:graph-theory::euler-tours, Euler Tours>>.

A tree latexmath:[$T$] may not be Eulerian.  For example, in a binary tree, the
leaves have degree one.  We can, however, transform a tree to a
directed graph by replacing each (undirected) edge with two edges, one
in each direction. Such a tree corresponds to a graph where each
vertex has even degree (some on in and outgoing edges) and thus is
guarantee to be Eulerian.

INSERT EXAMPLE. 

For the rest of this chapter, we shall consider *_rooted trees_* where
a single vertex is identified as a root.  In rooted trees, edges can
be oriented towards or away from the root.  We shall orient them away
from the root, because this is more consistent with the typical way
trees are represented as a data structure.

The Euler tour of a rooted tree starts at the root, and *_enters_* the
first child, performs an Euler tour of the subtree rooted at the
child, and *_exits_* the child to returt to the root, and enters the
second child and so on.


INSERT EXAMPLE. 

Note that the Euler Tour of a tree is composed of the Euler Tour trees
of the subtrees of the tree.  This makes it possible to perform
certain computations on trees using Euler Tour trees. 

For example, let's suppose that we wish to compute the "sum" of the
elements in a subtree by using a specified associative operation
latexmath:[$\oplus$] with identity latexmath:[$id$]. Suppose
furthermore that we have the inverse for each element under this
operation, such that latexmath:[$x \oplus x^{-1} = id$].  We can use
sequences and scan to perform the computation as follows.

First, we construct the Euler Tour for the tree and represent it as a
sequence.  The sequence contains two entries for each node of the
tree, corresponding to the entry and the ext points.  Now, for the
entry point of each node, we write the label of that node, and we
write latexmath:[$id$] for all the rest of the. We then perform a
sequence scan on this tree with latexmath:[$\oplus$] and
latexmath:[$id$] as our monoid.  We can then compute the sum for any
subtree as taking the result of the scan at the exit point and then
"subtract" the elemen at the entery point, and finally "substract" the
label of the node itself.  

INSERT EXAMPLE


Since sequence scan requires latexmath:[$O(n)$] work in
latexmath:[$O(\lg{n})$] span, this algorithm also has the same work
and span, and this is quite a good parallel algorithm.  The problem is
that it requires an invese operation.  In other words, it does not
suffice to be given a manoid, we actually need a
https://en.wikipedia.org/wiki/Group_(mathematics)[group], which is
algebraic structure that requires an invertibility. 

/////




//////////
Older version
Trees are a basic structure for representing relations.  It is thus
 natural to ask whether we can perform tree operations in parallel.

As our first motivating example, let's consider a very simple
question: we are given a rooted binary tree latexmath:[$T$] and a root latexmath:[$r$] and
asked to determine the number of nodes in the tree.  One way to do
this would be to use divide-and-conquer.  We recursively parallel
compute the size of the left subtree, right subtree, and add one for
the root.  Since the left and the right subtrees are independent, the
computtaions can be don in parallel. If the tree latexmath:[$T$] is balanced, then
such an algorithm performs latexmath:[$Theta(n)$] work in latexmath:[$\Theta(\lg{n})$] span.
If, howener, latexmath:[$T$] is unbalanced, then span can be as large as
$\Omega(n)$.

As our second mativating example, suppose that we are given a rooted
tree latexmath:[$T$] that represents a mathemetical expression consisting of
addition and multiplication operations over real numbers and we wish
to compute the value of this expression.  In such a tree, each
internal node is an operation (plus or multiply) and each leaf is a
real number.  Again, we can solve this problem by using a
divide-and-conquer algorithm, whic computes the values of the
expressions on the left and the right subtrees and combines them
acconding to the operation at the root.  If the tree latexmath:[$T$] is balanced,
then such an algorithm performs latexmath:[$Theta(n)$] work in latexmath:[$\Theta(\lg{n})$
span.  If, however, latexmath:[$T$] is unbalanced, then span can be as large as
linear.


In the rest of this chapter, we discuss two techniques for solving
such problems on trees.  


=== Euler Tour Trees

Recall the definiton of <<sec:graph-theory::euler-tours, Euler Tours>>.

A tree latexmath:[$T$] may not be Eulerian.  For example, in a binary tree, the
leaves have degree one.  We can, however, transform a tree to a
directed graph by replacing each (undirected) edge with two edges, one
in each direction. Such a tree corresponds to a graph where each
vertex has even degree (some on in and outgoing edges) and thus is
guarantee to be Eulerian.

INSERT EXAMPLE. 

For the rest of this chapter, we shall consider *_rooted trees_* where
a single vertex is identified as a root.  In rooted trees, edges can
be oriented towards or away from the root.  We shall orient them away
from the root, because this is more consistent with the typical way
trees are represented as a data structure.

The Euler tour of a rooted tree starts at the root, and *_enters_* the
first child, performs an Euler tour of the subtree rooted at the
child, and *_exits_* the child to returt to the root, and enters the
second child and so on.


INSERT EXAMPLE. 

Note that the Euler Tour of a tree is composed of the Euler Tour trees
of the subtrees of the tree.  This makes it possible to perform
certain computations on trees using Euler Tour trees. 

For example, let's suppose that we wish to compute the "sum" of the
elements in a subtree by using a specified associative operation
latexmath:[$\oplus$] with identity latexmath:[$id$]. Suppose
furthermore that we have the inverse for each element under this
operation, such that latexmath:[$x \oplus x^{-1} = id$].  We can use
sequences and scan to perform the computation as follows.

First, we construct the Euler Tour for the tree and represent it as a
sequence.  The sequence contains two entries for each node of the
tree, corresponding to the entry and the ext points.  Now, for the
entry point of each node, we write the label of that node, and we
write latexmath:[$id$] for all the rest of the. We then perform a
sequence scan on this tree with latexmath:[$\oplus$] and
latexmath:[$id$] as our monoid.  We can then compute the sum for any
subtree as taking the result of the scan at the exit point and then
"subtract" the elemen at the entery point, and finally "substract" the
label of the node itself.  

INSERT EXAMPLE


Since sequence scan requires latexmath:[$O(n)$] work in
latexmath:[$O(\lg{n})$] span, this algorithm also has the same work
and span, and this is quite a good parallel algorithm.  The problem is
that it requires an invese operation.  In other words, it does not
suffice to be given a manoid, we actually need a
https://en.wikipedia.org/wiki/Group_(mathematics)[group], which is
algebraic structure that requires an invertibility. 


/////////

